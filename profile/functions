
# dotfiles.d functions

# Encryption/Decryption
function encrypt() {
  tar --create --file - --gzip -- "$1" | \
  openssl aes-256-cbc -salt -out $2.enc
}

function decrypt() {
  openssl aes-256-cbc -d -salt -in "$1" | \
  tar -v --extract --gzip --file -
}

function awsprofile() {
  # local DEFAULT_AWS_REGION=us-west-2
  local CREDENTIALS_FILE=/Volumes/gwre-vault/aws/credentials-gwre

  if [ -f ${CREDENTIALS_FILE} ]; then
    # if [ -z $2 ]; then
    #   echo "Using default region: ${DEFAULT_AWS_REGION}"
    #   export AWS_REGION=${DEFAULT_AWS_REGION}
    # else
    #   export AWS_REGION=$2
    # fi
    unset AWS_REGION
    export AWS_SHARED_CREDENTIALS_FILE=${CREDENTIALS_FILE}
    export AWS_PROFILE=$1
    export AWS_AVAILABILITY_ZONES=$(aws ec2 describe-availability-zones --profile ${AWS_PROFILE} | jq -c '[.AvailabilityZones[].ZoneName]')
  else
    echo "${CREDENTIALS_FILE} not found."
  fi
}

function ssh_vagrant_vm() {
  pushd $VAGRANT_VMS
  cd $1
  if [ -f Vagrantfile ]; then
      echo "ssh to $1 at `pwd`"
      vagrant ssh-config > /dev/null 2>&1
      if [ "${PIPESTATUS[0]}" -ne 0 ]; then
        vagrant up
      fi
      vagrant ssh

  else
      echo "Vagrantfile not found."
  fi
  popd
}

# save a web page in a local copy and open it
function get() {
  mkdir -p $TMPDIR/localweb; pushd $TMPDIR/localweb
  file=$(date +'%m%d%H%M%s')".html"; wget $1 -O $file; open $file; popd
}

function unset-aws-profile() {
  unset AWS_REGION
  unset AWS_PROFILE
  unset AWS_AVAILABILITY_ZONES
  unset AWS_SHARED_CREDENTIALS_FILE
}

function unset-aws-keys() {
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
}

function git-copu() {
  git commit -am "$@" && git push
}